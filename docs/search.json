[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I will write something. I promise."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html",
    "href": "posts/why-polars-is-great/why_polars_is_great.html",
    "title": "Why Polars is great",
    "section": "",
    "text": "According to the official Polars website, Polars is\n\n[…] a lightning fast DataFrame library/in-memory query engine. Its embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs and so much more.\n\nThis sounds a lot like pandas, doesn’t it? According to the pandas website, pandas is:\n\n[…] a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.\n\nAlright then, both are clearly intended for similar things, but Polars has this emphasize on speed and this is really the first noteworthy difference. Polars is implemented in Rust, which, in contrast to Python, does not have a Global Interpreter Lock (GIL). That means that you can use your entire machine for your data wrangling with Polars. Let’s have a closer look into the differences of these two tools."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#what-is-polars",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#what-is-polars",
    "title": "Why Polars is great",
    "section": "",
    "text": "According to the official Polars website, Polars is\n\n[…] a lightning fast DataFrame library/in-memory query engine. Its embarrassingly parallel execution, cache efficient algorithms and expressive API makes it perfect for efficient data wrangling, data pipelines, snappy APIs and so much more.\n\nThis sounds a lot like pandas, doesn’t it? According to the pandas website, pandas is:\n\n[…] a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.\n\nAlright then, both are clearly intended for similar things, but Polars has this emphasize on speed and this is really the first noteworthy difference. Polars is implemented in Rust, which, in contrast to Python, does not have a Global Interpreter Lock (GIL). That means that you can use your entire machine for your data wrangling with Polars. Let’s have a closer look into the differences of these two tools."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#the-main-differences-between-polars-and-pandas",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#the-main-differences-between-polars-and-pandas",
    "title": "Why Polars is great",
    "section": "2 The main differences between Polars and pandas",
    "text": "2 The main differences between Polars and pandas\n\nThere is no index/multi-index in Polars\nYes, you read this correctly. How can that be true? Could you have wasted all the hours you spent learning how to use reset_index(), set_index(), and the difference between .loc[] and .iloc[]? Maybe. Honestly, if you really think about it, it doesn’t make too much sense. Just think about databases and SQL for a moment. SQL tables have no such index either and SQL is the forefront of data engineering. On the other hand, once you have mastered pandas’ index, functions like resample() can make your life much easier. But once again, at the end, it doesn’t matter really whether it is an index or simply a column. Polars makes a good point with this:\n\nPolars aims to have predictable results and readable queries, as such we think an index does not help us reach that objective.\n\n\n\nParallel operations\nAs already mentioned, you can parallelize with Polars because it is written in Rust. This all happens under hood. That means you don’t need to care about it or install anything else.\n\n\nThe lazy API\nAs of today, pandas has only an eager API. This means that when you run whatever command with pandas, let’s say join(), pandas will execute this directly. Polars lets you collect commands into a query, which are then executed when you call the collect() function. By knowing all the steps you want to execute, Polars can make use of a query optimization to speed up your code."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#what-they-have-in-common",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#what-they-have-in-common",
    "title": "Why Polars is great",
    "section": "3 What they have in common",
    "text": "3 What they have in common\nA lot actually. That is because pandas is an awesome library and they have thought of great things that do not need to be reinvented. If you are coming from pandas, you will need some time to adjust yourself to the somewhat different syntax. Other than that, you will quickly find your way around things in Polars.\nIn this section of the Polars’ user guide, you can find a list of the key syntax differences."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#more-amazing-features",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#more-amazing-features",
    "title": "Why Polars is great",
    "section": "4 More amazing features",
    "text": "4 More amazing features\nThis is a list of features I find personally very interesting and that are difficult to find elsewhere.\n\nScanning files\nMost input functions that start with read_ have also a scan_ equivalent, e.g. read_parquet() and scan_parquet(). What it does is that it allows you to first scan the file instead of reading the whole file into memory. This gives you to the possibility to query data in a file with less RAM and CPU usage.\n\n\nSQL\nIf you are familiar with SQL and want to use it even in the Python world, you can do this with Polars. Polars offers an SQL API that lets you write SQL queries. This even works across different files with different file formats. If you combine it with scanning files, you can for example merge parts of a csv file with a couple of columns in a parquet file on a cloud storage without consuming too much memory or CPU.\nThis is the link to the SQL section of the Polars user guide.\n\n\nStreaming\nEven though the streaming feature is still under development, you can already use it for a few file formats and functions. Streaming is running your query in batches, which enables you to deal with datasets that are larger than your memory.\nYou can read more about streaming in the official user guide."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#should-i-switch-completely-to-polars",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#should-i-switch-completely-to-polars",
    "title": "Why Polars is great",
    "section": "5 Should I switch completely to Polars?",
    "text": "5 Should I switch completely to Polars?\nNo, don’t! Especially not if you have already thousands of lines of pandas code. Instead, use Polars there you really need it, namely where your bottlenecks are. So start there where you really need a speed-up or where reading from many different data sources has become a burden with pandas. In summary, use pandas and Polars at what they are good at, instead of going for one of them only.\nIn your code, you can simply convert between these two DataFrame types, even though you shouldn’t do it too often with big DataFrames. Here is an example:\n\nimport pandas as pd\nimport polars as pl\n\npandas_df = pd.DataFrame({\"col1\": [0, 1], \"col2\": [\"a\", \"b\"]})\ntype(pandas_df)\n\npandas.core.frame.DataFrame\n\n\n\npolars_df = pl.from_pandas(pandas_df)\ntype(polars_df)\n\npolars.dataframe.frame.DataFrame\n\n\n\ntype(polars_df.to_pandas())\n\npandas.core.frame.DataFrame"
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#summary",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#summary",
    "title": "Why Polars is great",
    "section": "6 Summary",
    "text": "6 Summary\nPolars is , similar to pandas, a powerful Python libary for data wrangling and more. Given that it is written in Rust, it is much faster and more memory-efficient than pandas. If you need that extra bit of performance, you should definetly check out Polars.\nHowever, don’t be silly and rewrite all your pandas code in Polars. Polars and pandas get along with each other and are probably most powerful when used together."
  },
  {
    "objectID": "posts/why-polars-is-great/why_polars_is_great.html#links",
    "href": "posts/why-polars-is-great/why_polars_is_great.html#links",
    "title": "Why Polars is great",
    "section": "7 Links",
    "text": "7 Links\nCheck out the official Polars website. It contains a nice user guide and the API docs. If you are coming from pandas, read Coming from Pandas first before you start writing code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "spotopt-blog",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n\n\n\n\n  \n\n\n\n\nHow to read from ENTSO-E with Python\n\n\n\n\n\nThe ENTSO-E transparency platform is an invaluable resource for accessing diverse power system data through a user interface and a RESTful API. This blog post introduces the entsoe-py Python package, a tool designed to streamline data retrieval from the ENTSO-E API.\n\n\n\n\n\n\nJan 18, 2024\n\n\n4 min\n\n\n\n\n\n\n  \n\n\n\n\nWhy Polars is great\n\n\n\n\n\nDiscover the capabilities of Polars and explore its key differences from pandas in data manipulation and analysis. Learn how to choose between these powerful tools based on your data handling needs, ensuring efficient and effective data analysis.\n\n\n\n\n\n\nDec 1, 2023\n\n\n5 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html",
    "title": "How to read from ENTSO-E with Python",
    "section": "",
    "text": "The ENTSO-E transparency platform serves as a comprehensive source for various types of power system data. It encompasses six primary data categories: load, generation, transmission, balancing, outages, and congestion management. Most of these categories feature different time series, such as actual or forecasted load data. In addition to the user interface on their website, the platform also offers a RESTful API for data retrieval.\nTo access data via the API, you’ll need an API key. Registration on their website is straightforward – if you haven’t already signed up, you can do so to obtain an access key."
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#entsoe-py",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#entsoe-py",
    "title": "How to read from ENTSO-E with Python",
    "section": "2 entsoe-py",
    "text": "2 entsoe-py\nTo access data from the API, you could write your own code. However, be prepared for the challenging task of XML parsing. Fortunately, there is Python package called entsoe-py that I am using here to retrieve data from ENTSO-E. Before diving into that, I would like to acknowledge one of its notable contributors.\n\nContributors\nContributing to open-source projects like this one is immensely valuable to the power system modeling community and is deeply appreciated.\nOne contributor whose work has been particularly beneficial to me (among many others) is Frank Boerman. Unfortunately, I don’t know him personally, but his contributions have significantly advanced the accessibility of power system data for Python programmers and others. As of January 9, 2024, he has made 60 commits to the entsoe-py package.\nAdditionally, Frank appears to be the lead maintainer of the jao-py Python package, which facilitates access to FBMC data from JAO. He has also integrated some of this data into well-organized Grafana dashboards, which I highly recommend exploring.\nFurthermore, he runs a blog focusing on energy market-related topics, offering valuable insights and information.\n\n\nInstallation\nThe entsoe-py package is on PyPI an can be installed via pip.\npip install entsoe-py\nThe code can be found here on GitHub.\nThe latest version 0.6.2 requires pandas 1.4.0 or higher.\n\n\nPackage structure\nThe package features two primary classes: EntsoeRawClient and EntsoePandasClient. While they share the same input parameters, their key difference lies in the format of the returned data. Using EntsoeRawClient will return data in XML format, requiring users to handle their own parsing. On the other hand, EntsoePandasClient is perhaps the more convenient and widely used interface, as it integrates seamlessly with the Pandas library, simplifying data handling and analysis."
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#package-structure",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#package-structure",
    "title": "How to read from ENTSO-E with Python",
    "section": "3 Package structure",
    "text": "3 Package structure\nThe package comes with two main classes, namely EntsoeRawClient as well as EntsoePandasClient. In terms of input parameters, they are the same. The main difference is that calles with EntsoeRawClient return XML which means that you have to do your own parsing. The most convenient and probably most used interface is EntsoePandasClient.\n\nimport os\nfrom entsoe import EntsoePandasClient\nimport pandas as pd\nfrom dotenv import load_dotenv\n\nload_dotenv() \nENTSOE_API_KEY = os.environ[\"ENTSOE_API_KEY\"]\nclient = EntsoePandasClient(api_key=ENTSOE_API_KEY)\n\n\n\nprices = client.query_day_ahead_prices(\n    country_code=\"DE_LU\",\n    start=pd.Timestamp(\"2020-01-01\", tz=\"CET\"),\n    end=pd.Timestamp(\"2023-06-01\", tz=\"CET\"),\n)\n\n\nprices.plot()\n\n&lt;Axes: &gt;"
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#the-entso-e-transparency-platform",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#the-entso-e-transparency-platform",
    "title": "How to read from ENTSO-E with Python",
    "section": "",
    "text": "The ENTSO-E transparency platform serves as a comprehensive source for various types of power system data. It encompasses six primary data categories: load, generation, transmission, balancing, outages, and congestion management. Most of these categories feature different time series, such as actual or forecasted load data. In addition to the user interface on their website, the platform also offers a RESTful API for data retrieval.\nTo access data via the API, you’ll need an API key. Registration on their website is straightforward – if you haven’t already signed up, you can do so to obtain an access key."
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#the-api-and-entsoe-py",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#the-api-and-entsoe-py",
    "title": "How to read from ENTSO-E with Python",
    "section": "2 The API and entsoe-py",
    "text": "2 The API and entsoe-py\nThere is a RESTful API and a corresponding user guide for the ENTSO-E transparency platform. Sure, you can put your own code together to make request to the API. However, the XML parsing will be painful. Luckily, there is Python package called entsoe-py that I am using here to retrieve data from ENTSO-E. We are diving into the package later. I would first like to mention one of its contributors.\n\nContributors\nContributing to this kind of open-source projects helps a lot of people in the power system modelling community and is highly appreciated.\nOne of the contributers I have benefited from (and there are many more) is Frank Boerman. Unfortunatly, I don’t know him personally but he has contributed greatly to making power system data more accessible for Python programmers and others. He has made 60 commits (as of 2024-01-09) to the entsoe-py package.\nIn addition, he seems to be the core maintaner of the jao-py Python package, which can be used to fetch FBMC data from JAO. Some of this data and more is put into nicely formatted boerman.dev Grafana dashboards. I can really recommend to check them out.\nHe also runs a blog where he blogs about energy market related topics.\n\n\nInstallation\nThe entsoe-py package is on PyPI an can be installed via pip.\npip install entsoe-py\nThe code can be found here on GitHub.\nThe latest version 0.6.2 requires pandas 1.4.0 or higher.\n\n\nPackage structure\nThe package comes with two main classes, namely EntsoeRawClient as well as EntsoePandasClient. In terms of input parameters, they are the same. The main difference is that calles with EntsoeRawClient return XML which means that you have to do your own parsing. The most convenient and probably most used interface is EntsoePandasClient."
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#reading-data",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#reading-data",
    "title": "How to read from ENTSO-E with Python",
    "section": "3 Reading data",
    "text": "3 Reading data\n\nInitializing the Pandas client\nTo begin, let’s read data from the ENTSO-E transparency platform. In the example below, I’ll demonstrate using the dotenv library to import my ENTSO-E API key from environment variables. This approach is particularly useful for keeping sensitive information secure. If you’re running your code in a local environment and prefer simplicity, you can directly insert your API key into the code. However, be cautious with this method, especially if sharing your code, as it exposes your key to potential security risks.\n\nimport os\n\nimport pandas as pd\nfrom dotenv import load_dotenv\nfrom entsoe import EntsoePandasClient\n\nload_dotenv()\nENTSOE_API_KEY = os.environ[\"ENTSOE_API_KEY\"]\nclient = EntsoePandasClient(api_key=ENTSOE_API_KEY)\n\nTo retrieve specific time series data from the ENTSO-E platform, it’s crucial to call the corresponding function in the entsoe-py package. Each time series data type, like load forecasts or day-ahead prices, has a dedicated function – for instance, query_load_forecast() for load forecasts and query_day_ahead_prices() for day-ahead prices. You can find a comprehensive list of these functions on the entsoe-py’s GitHub page.\nIn the following example, I demonstrate how to retrieve the day-ahead price data for Germany spanning three and a half years. It’s important to note that querying data over extended periods, such as more than one year, can be time-consuming due to the necessary pagination. Be prepared for this process to take several seconds.\n\nprices = client.query_day_ahead_prices(\n    country_code=\"DE_LU\",\n    start=pd.Timestamp(\"2020-01-01\", tz=\"CET\"),\n    end=pd.Timestamp(\"2023-06-01\", tz=\"CET\"),\n)\n\nWhat we get back is a pandas Series.\n\ntype(prices)\n\npandas.core.series.Series\n\n\nThe index is a proper pandas DatetimeIndex with the correct time zone, which is quite useful when merging with other time series.\n\ntype(prices.index)\n\npandas.core.indexes.datetimes.DatetimeIndex\n\n\nLet’s have a sanity check and plot these prices.\n\nprices.plot()\n\n&lt;Axes: &gt;"
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#summary",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#summary",
    "title": "How to read from ENTSO-E with Python",
    "section": "4 Summary",
    "text": "4 Summary\nThe ENTSO-E transparency platform stands out as a crucial source for open power system data, catering to a wide range of needs within the power system modeling community. The entsoe-py Python package significantly simplifies the process of accessing this data through the ENTSO-E API. Credit goes to contributors like Frank Boerman, whose efforts have led to the development of user-friendly interfaces such as EntsoePandasClient. This particular interface enables the seamless integration of power system data directly into Pandas Series or DataFrames, enhancing the ease and efficiency of data analysis and handling"
  },
  {
    "objectID": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#links",
    "href": "posts/how-to-read-from-entsoe-with-python/how_to_read_from_entsoe_with_python.html#links",
    "title": "How to read from ENTSO-E with Python",
    "section": "5 Links",
    "text": "5 Links\nCheck out the user guide for the Transparency Platform RESTful API if you want to dig deeper.\nHere’s the link to the entsoe-py’s GitHub page again, for quick access"
  }
]